'use strict';

const stdEnv = require('std-env');

function toBoolean(val) {
  return val ? val !== "false" : false;
}
function parseJSON(val) {
  let obj;
  try {
    obj = JSON.parse(val || "{}");
  } catch (error) {
    obj = {};
  }
  return obj;
}

const builtInPlatforms = ["h5", "web", "app", "app-plus", "app-harmony", "mp-360", "mp-alipay", "mp-baidu", "mp-qq", "mp-toutiao", "mp-weixin", "mp-kuaishou", "mp-lark", "mp-jd", "mp-xhs", "quickapp-webview", "quickapp-webview-huawei", "quickapp-webview-union"];
const platform = process.env.UNI_PLATFORM;
const appPlatform = stdEnv.env.UNI_APP_PLATFORM;
const subPlatform = process.env.UNI_SUB_PLATFORM;
const utsPlatform = stdEnv.env.UNI_UTS_PLATFORM;
const isH5 = platform === "h5" || platform === "web";
const isWeb = platform === "web" || platform === "h5";
const isApp = platform === "app";
const isAppPlus = platform === "app-plus";
const isAppHarmony = platform === "app-harmony";
const isAppAndroid = appPlatform === "android" || utsPlatform === "app-android";
const isAppIOS = appPlatform === "ios" || utsPlatform === "app-ios";
const isMp = /^mp-/i.test(platform);
const isMpWeixin = platform === "mp-weixin";
const isMpAlipay = platform === "mp-alipay";
const isMpBaidu = platform === "mp-baidu";
const isMpKuaishou = platform === "mp-kuaishou";
const isMpQQ = platform === "mp-qq";
const isMpToutiao = platform === "mp-toutiao";
const isQuickapp = /^quickapp-webview/i.test(platform);
const isQuickappUnion = platform === "quickapp-webview-union";
const isQuickappHuawei = platform === "quickapp-webview-huawei";
const utsJsCodeFormat = stdEnv.env.UNI_UTS_JS_CODE_FORMAT;
const utsModuleType = stdEnv.env.UNI_UTS_MODULE_TYPE;
const utsModulePrefix = stdEnv.env.UNI_UTS_MODULE_PREFIX;
const utsTargetLanguage = stdEnv.env.UNI_UTS_TARGET_LANGUAGE;
const inputDir = stdEnv.env.UNI_INPUT_DIR;
const outputDir = stdEnv.env.UNI_OUTPUT_DIR;
const cliContext = stdEnv.env.UNI_CLI_CONTEXT;
const subpackage = process.env.UNI_SUBPACKAGE;
const mpPlugin = process.env.UNI_MP_PLUGIN;
const isMpPlugin = toBoolean(process.env.UNI_MP_PLUGIN);
const compilerVersion = process.env.UNI_COMPILER_VERSION;
const compilerVersionType = stdEnv.env.UNI_COMPILER_VERSION_TYPE;
const hbuilderxPlugins = stdEnv.env.UNI_HBUILDERX_PLUGINS;
const renderer = stdEnv.env.UNI_RENDERER;
const nvueCompiler = stdEnv.env.UNI_NVUE_COMPILER;
const nvueStyleCompiler = stdEnv.env.UNI_NVUE_STYLE_COMPILER;
const appCodeSpliting = stdEnv.env.UNI_APP_CODE_SPLITING;
const automatorWsEndpoint = process.env.UNI_AUTOMATOR_WS_ENDPOINT;
const automatorAppWebview = stdEnv.env.UNI_AUTOMATOR_APP_WEBVIEW;
const automatorAppWebviewSrc = process.env.UNI_AUTOMATOR_APP_WEBVIEW_SRC;
const h5Base = stdEnv.env.UNI_H5_BASE;
const h5Browser = stdEnv.env.UNI_H5_BROWSER;
const customScript = stdEnv.env.UNI_CUSTOM_SCRIPT;
const customDefine = stdEnv.env.UNI_CUSTOM_DEFINE;
const customContext = stdEnv.env.UNI_CUSTOM_CONTEXT;
const minimize = stdEnv.env.UNI_MINIMIZE;
const isMinimize = toBoolean(stdEnv.env.UNI_MINIMIZE);
const uvue = stdEnv.env.UNI_UVUE;
const isUVue = toBoolean(stdEnv.env.UNI_UVUE);
const uvueTargetLanguage = stdEnv.env.UNI_UVUE_TARGET_LANGUAGE;
const compiler = stdEnv.env.UNI_COMPILER;
const rendererNative = stdEnv.env.UNI_RENDERER_NATIVE;
const nvueAppStyles = stdEnv.env.UNI_NVUE_APP_STYLES;
const appChangedFiles = stdEnv.env.UNI_APP_CHANGED_FILES;
const appChangedPages = stdEnv.env.UNI_APP_CHANGED_PAGES;
const darkMode = process.env.VUE_APP_DARK_MODE;
const hasDarkMode = toBoolean(process.env.VUE_APP_DARK_MODE);
const hxUseBaseType = stdEnv.env.HX_USE_BASE_TYPE;
const hxDependenciesDir = stdEnv.env.HX_DEPENDENCIES_DIR;
const appX = stdEnv.env.UNI_APP_X;
const isAppX = toBoolean(stdEnv.env.UNI_APP_X);
const appXCacheDir = stdEnv.env.UNI_APP_X_CACHE_DIR;
const hxVersion = stdEnv.env.HX_VERSION;
const appXPageCount = stdEnv.env.UNI_APP_X_PAGE_COUNT;
const appXTsc = stdEnv.env.UNI_APP_X_TSC;
const appXSingleThread = stdEnv.env.UNI_APP_X_SINGLE_THREAD;
const appXSetup = stdEnv.env.UNI_APP_X_SETUP;
const appXUVueScriptEngine = stdEnv.env.UNI_APP_X_UVUE_SCRIPT_ENGINE;
const compileTarget = stdEnv.env.UNI_COMPILE_TARGET;
const compileCloudDir = stdEnv.env.UNI_COMPILE_CLOUD_DIR;
const modulesEncryptCacheDir = stdEnv.env.UNI_MODULES_ENCRYPT_CACHE_DIR;
const appPackType = stdEnv.env.UNI_APP_PACK_TYPE;
const appHarmonyProjectPath = stdEnv.env.UNI_APP_HARMONY_PROJECT_PATH;
const statTitleJson = parseJSON(stdEnv.env.STAT_TITLE_JSON);
const sourcemap = stdEnv.env.SOURCEMAP;
const hasSourcemap = toBoolean(stdEnv.env.SOURCEMAP);
const ssrClient = stdEnv.env.UNI_SSR_CLIENT;
const isSSRClient = toBoolean(stdEnv.env.UNI_SSR_CLIENT);
const ssrServer = stdEnv.env.UNI_SSR_SERVER;
const isSSRServer = toBoolean(stdEnv.env.UNI_SSR_SERVER);

exports.appChangedFiles = appChangedFiles;
exports.appChangedPages = appChangedPages;
exports.appCodeSpliting = appCodeSpliting;
exports.appHarmonyProjectPath = appHarmonyProjectPath;
exports.appPackType = appPackType;
exports.appPlatform = appPlatform;
exports.appX = appX;
exports.appXCacheDir = appXCacheDir;
exports.appXPageCount = appXPageCount;
exports.appXSetup = appXSetup;
exports.appXSingleThread = appXSingleThread;
exports.appXTsc = appXTsc;
exports.appXUVueScriptEngine = appXUVueScriptEngine;
exports.automatorAppWebview = automatorAppWebview;
exports.automatorAppWebviewSrc = automatorAppWebviewSrc;
exports.automatorWsEndpoint = automatorWsEndpoint;
exports.builtInPlatforms = builtInPlatforms;
exports.cliContext = cliContext;
exports.compileCloudDir = compileCloudDir;
exports.compileTarget = compileTarget;
exports.compiler = compiler;
exports.compilerVersion = compilerVersion;
exports.compilerVersionType = compilerVersionType;
exports.customContext = customContext;
exports.customDefine = customDefine;
exports.customScript = customScript;
exports.darkMode = darkMode;
exports.h5Base = h5Base;
exports.h5Browser = h5Browser;
exports.hasDarkMode = hasDarkMode;
exports.hasSourcemap = hasSourcemap;
exports.hbuilderxPlugins = hbuilderxPlugins;
exports.hxDependenciesDir = hxDependenciesDir;
exports.hxUseBaseType = hxUseBaseType;
exports.hxVersion = hxVersion;
exports.inputDir = inputDir;
exports.isApp = isApp;
exports.isAppAndroid = isAppAndroid;
exports.isAppHarmony = isAppHarmony;
exports.isAppIOS = isAppIOS;
exports.isAppPlus = isAppPlus;
exports.isAppX = isAppX;
exports.isH5 = isH5;
exports.isMinimize = isMinimize;
exports.isMp = isMp;
exports.isMpAlipay = isMpAlipay;
exports.isMpBaidu = isMpBaidu;
exports.isMpKuaishou = isMpKuaishou;
exports.isMpPlugin = isMpPlugin;
exports.isMpQQ = isMpQQ;
exports.isMpToutiao = isMpToutiao;
exports.isMpWeixin = isMpWeixin;
exports.isQuickapp = isQuickapp;
exports.isQuickappHuawei = isQuickappHuawei;
exports.isQuickappUnion = isQuickappUnion;
exports.isSSRClient = isSSRClient;
exports.isSSRServer = isSSRServer;
exports.isUVue = isUVue;
exports.isWeb = isWeb;
exports.minimize = minimize;
exports.modulesEncryptCacheDir = modulesEncryptCacheDir;
exports.mpPlugin = mpPlugin;
exports.nvueAppStyles = nvueAppStyles;
exports.nvueCompiler = nvueCompiler;
exports.nvueStyleCompiler = nvueStyleCompiler;
exports.outputDir = outputDir;
exports.platform = platform;
exports.renderer = renderer;
exports.rendererNative = rendererNative;
exports.sourcemap = sourcemap;
exports.ssrClient = ssrClient;
exports.ssrServer = ssrServer;
exports.statTitleJson = statTitleJson;
exports.subPlatform = subPlatform;
exports.subpackage = subpackage;
exports.utsJsCodeFormat = utsJsCodeFormat;
exports.utsModulePrefix = utsModulePrefix;
exports.utsModuleType = utsModuleType;
exports.utsPlatform = utsPlatform;
exports.utsTargetLanguage = utsTargetLanguage;
exports.uvue = uvue;
exports.uvueTargetLanguage = uvueTargetLanguage;
