import { existsSync, readFileSync } from 'node:fs';
import { resolve, parse, basename, extname, dirname } from 'node:path';
import { customScript, platform as platform$1, inputDir, isApp, isMp } from '@uni-helper/uni-env';
import { createFilter, normalizePath } from 'vite';
import { createRequire } from 'node:module';

const platform = customScript || platform$1;
const _require = typeof require === "function" ? require : createRequire(import.meta.url);
const uniUtils = _require("@dcloudio/uni-cli-shared/dist/utils.js");
const uniResolve = _require("@dcloudio/uni-cli-shared/dist/resolve.js");
const constants = _require("@dcloudio/uni-cli-shared/dist/constants.js");
uniUtils.normalizePagePath = function(pagePath, platform2) {
  const absolutePagePath = resolve(inputDir, pagePath);
  let extensions = constants.PAGE_EXTNAME;
  if (isApp)
    extensions = constants.PAGE_EXTNAME_APP;
  for (let i = 0; i < extensions.length; i++) {
    const extname = extensions[i];
    if (existsSync(absolutePagePath + extname))
      return pagePath + extname;
    const withPlatform = `${absolutePagePath}.${platform2}${extname}`;
    if (existsSync(withPlatform))
      return pagePath + extname;
  }
  console.error(`${pagePath} not found`);
};
const requireResolve = uniResolve.requireResolve;
uniResolve.requireResolve = function(filename, basedir) {
  try {
    return requireResolve(filename, basedir);
  } catch (error) {
    const { ext, base, dir } = parse(filename);
    filename = `${dir}/${base}.${platform}${ext ? `.${ext}` : ""}`;
    return requireResolve(filename, basedir);
  }
};

function resolveOptions(userOptions) {
  return {
    include: "**/*",
    exclude: [/[\\/]node_modules[\\/]/, /[\\/]\.git[\\/]/],
    ...userOptions
  };
}
function hasPlatformSuffix(id) {
  const fileName = basename(id, extname(id));
  return new RegExp(`\\.${platform}$`).test(fileName);
}
function joinPlatformSuffix(id) {
  return id.replace(/(.*)\.(.*)$/, `$1.${platform}.$2`);
}
function VitePluginUniPlatform(userOptions = {}) {
  const options = resolveOptions(userOptions);
  const filter = createFilter(options.include, options.exclude);
  return {
    name: "vite-plugin-uni-platform",
    enforce: "pre",
    async resolveId(source, importer, options2) {
      if (hasPlatformSuffix(source))
        return null;
      const sourceResolution = await this.resolve(source, importer, {
        ...options2,
        skipSelf: true
        // 避免无限循环
      });
      if (sourceResolution)
        return null;
      const platformSource = joinPlatformSuffix(source);
      const resolution = await this.resolve(platformSource, importer, { ...options2, skipSelf: true });
      if (!resolution || resolution.external)
        return resolution;
      if (!filter(resolution.id))
        return null;
      const sourceId = normalizePath(resolve(dirname(importer), source));
      const isVue = resolution.id.endsWith("vue");
      return isMp && isVue ? sourceId : resolution;
    },
    // 自定义加载器，尝试将所有不带 {platform} 后缀的文件拼接 {platform} 后去加载
    async load(id) {
      let platformId = id;
      if (!hasPlatformSuffix(id))
        platformId = joinPlatformSuffix(id);
      if (!filter(platformId))
        return;
      if (platformId && platformId !== id && existsSync(platformId)) {
        return readFileSync(platformId, {
          encoding: "utf-8"
        });
      }
    }
  };
}

export { VitePluginUniPlatform, VitePluginUniPlatform as default };
