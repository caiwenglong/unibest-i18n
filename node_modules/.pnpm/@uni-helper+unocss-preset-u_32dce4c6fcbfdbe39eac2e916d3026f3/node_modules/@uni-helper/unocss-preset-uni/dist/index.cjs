'use strict';

const unocss = require('unocss');
const uniEnv = require('@uni-helper/uni-env');
const presetLegacyCompat = require('@unocss/preset-legacy-compat');
const unocssApplet = require('unocss-applet');
const utils = require('@unocss/preset-mini/utils');
const ruleUtils = require('@unocss/rule-utils');

function parseOption(value, defaultValue) {
  if (value === false)
    return value;
  if (value === true)
    return defaultValue ?? {};
  if (value)
    return { ...defaultValue, ...value };
  if (defaultValue)
    return defaultValue;
  return false;
}
function resolveOptions(userOptions = {}) {
  const uno = parseOption(userOptions.uno, {});
  const attributify = parseOption(
    userOptions.attributify,
    { ignoreAttributes: uniEnv.isMp ? ["block", "fixed"] : undefined }
  );
  const remRpx = parseOption(
    userOptions.remRpx,
    { mode: uniEnv.isMp ? undefined : "rpx2rem" }
  );
  return {
    ...userOptions,
    uno,
    remRpx,
    attributify
  };
}

function createPresets(options) {
  const presets = [];
  let presetUno = unocss.presetUno;
  if (uniEnv.isMp) {
    presetUno = unocssApplet.presetApplet;
    presets.push(presetLegacyCompat.presetLegacyCompat({
      commaStyleColorFunction: true,
      legacyColorSpace: true
    }));
  }
  if (options.uno)
    presets.push(presetUno(options.uno));
  if (options.remRpx)
    presets.push(unocssApplet.presetRemRpx(options.remRpx));
  if (options.attributify)
    presets.push(unocss.presetAttributify(options.attributify));
  return presets;
}

const theme = {
  platforms: uniEnv.builtInPlatforms.reduce((acc, platform) => {
    acc[platform] = platform;
    const withoutPrefix = platform.replace(/^mp-/, "");
    if (withoutPrefix && withoutPrefix !== platform)
      acc[withoutPrefix] = platform;
    return acc;
  }, { mp: "mp", app: "app", quickapp: "quickapp" })
};

function createTransformers(options) {
  const transformers = [];
  if (uniEnv.isMp && options.attributify)
    transformers.push(unocssApplet.transformerAttributify(options.attributify));
  return transformers;
}

function createVariants() {
  const platformVariants = {
    name: "unocss-preset-uni-platforms",
    match(matcher, ctx) {
      const variant = ruleUtils.variantGetParameter("uni-", matcher, ctx.generator.config.separators);
      if (variant) {
        const [match, rest] = variant;
        let matchPlatform = utils.h.bracket(match) ?? "";
        const { platforms = {} } = ctx.theme;
        matchPlatform = matchPlatform === "" ? platforms[match] ?? "" : matchPlatform;
        if (matchPlatform) {
          return {
            matcher: rest,
            selector: (s) => uniEnv.platform !== undefined && uniEnv.platform.startsWith(matchPlatform) ? s : `${s}-pass`
          };
        }
      }
    },
    multiPass: true,
    autocomplete: "uni-$platforms:"
  };
  return [platformVariants];
}

const presetUni = unocss.definePreset((userOptions = {}) => {
  const options = resolveOptions(userOptions);
  const presets = createPresets(options);
  const variants = createVariants();
  const transformers = createTransformers(options);
  return {
    name: "unocss-preset-uni",
    presets,
    variants,
    theme,
    configResolved(config) {
      if (!config.transformers)
        config.transformers = transformers;
      else
        config.transformers = [...config.transformers, ...transformers];
    }
  };
});

exports.createPresets = createPresets;
exports.createTransformers = createTransformers;
exports.createVariants = createVariants;
exports.presetUni = presetUni;
exports.resolveOptions = resolveOptions;
exports.theme = theme;
