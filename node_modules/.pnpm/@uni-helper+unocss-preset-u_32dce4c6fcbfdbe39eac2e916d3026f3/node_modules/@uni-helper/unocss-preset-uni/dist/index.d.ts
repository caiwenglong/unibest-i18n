import { presetAttributify, Preset, SourceCodeTransformer, VariantObject, PresetFactory } from 'unocss';
import { TransformerAttributifyOptions, PresetAppletOptions, RemRpxOptions } from 'unocss-applet';
import { Theme } from '@unocss/preset-mini';
export { Theme } from '@unocss/preset-mini';

type PresetAttributifyOptions = Parameters<typeof presetAttributify>[number] & TransformerAttributifyOptions;
interface UniPresetOptions {
    /**
     * 开关/配置 PresetUno
     *
     * @default true
     * @summary 小程序平台将自动使用 PresetApplet
     */
    uno: boolean | PresetAppletOptions;
    /**
     * 开关/配置 presetRemRpx
     * @default true
     * @default { mode: 'rpx2rem' } // 除了小程序平台
     */
    remRpx: boolean | RemRpxOptions;
    /**
     * 开关/配置 presetAttributify
     * @default true
     * @default { ignoreAttributes: ['block', 'fixed'] } // 小程序平台
     * @summary 小程序平台将自动使用 transformerAttributify
     */
    attributify: boolean | PresetAttributifyOptions;
}
interface UserUniPresetOptions extends Partial<UniPresetOptions> {
}
interface ResolvedUniPresetOptions extends UniPresetOptions {
    uno: false | PresetAppletOptions;
    attributify: false | PresetAttributifyOptions;
    remRpx: false | RemRpxOptions;
}

declare function resolveOptions(userOptions?: Partial<UniPresetOptions>): ResolvedUniPresetOptions;

declare function createPresets(options: ResolvedUniPresetOptions): Preset<any>[];

declare module '@unocss/preset-mini' {
    interface Theme {
        platforms: Record<string, string>;
    }
}
declare const theme: Theme;

declare function createTransformers(options: ResolvedUniPresetOptions): SourceCodeTransformer[];

declare function createVariants(): VariantObject<object>[];

declare const presetUni: PresetFactory<object, UserUniPresetOptions>;

export { type PresetAttributifyOptions, type ResolvedUniPresetOptions, type UniPresetOptions, type UserUniPresetOptions, createPresets, createTransformers, createVariants, presetUni, resolveOptions, theme };
